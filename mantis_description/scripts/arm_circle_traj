#!/usr/bin/env python

import sys
from math import *

import rospy
from std_msgs.msg import Float64
from nav_msgs.msg import Path
from sensor_msgs.msg import JointState

global start_traj
global cycles_traj
global duration_traj
global time_start_traj
global half_cycle_time
global a1
global a2

global pub_j1
global pub_j2

start_traj = False
cycles_traj = int(sys.argv[1])
duration_traj = rospy.Duration(float(sys.argv[2]))
time_start_traj = rospy.Time(0)

pub_j1 = rospy.Publisher('/mantis_uav/joint_position_controller/joint_shoulder/command', Float64, queue_size=10)
pub_j2 = rospy.Publisher('/mantis_uav/joint_position_controller/joint_elbow/command', Float64, queue_size=10)
pub_ja = rospy.Publisher('/dynamixel_interface/setpoints', JointState, queue_size=10)

def timer_callback(e):
	global start_traj
	global cycles_traj
	global duration_traj
	global time_start_traj

	if(start_traj and (time_start_traj == rospy.Time(0))):
		time_start_traj = rospy.Time.now()

	if((time_start_traj != rospy.Time(0)) and ( rospy.Time.now() < (time_start_traj + duration_traj))):

		tc = rospy.Time.now() - time_start_traj

		alpha = cycles_traj*tc.to_sec()/duration_traj.to_sec()

		if(int(alpha+1) % 2):
			alpha = alpha - floor(alpha)
			q1 = -(alpha-0.5)*(pi/2)
		else:
			alpha = alpha - floor(alpha)
			q1 = (alpha-0.5)*(pi/2)

		pub_j1.publish(q1)
		pub_j2.publish(0.0)

		ja = JointState()
		ja.header.frame_id = "mantis_uav"
		ja.header.stamp = rospy.Time.now()
		ja.name = ["joint_shoulder","joint_elbow"]
		ja.position = [q1,q1]
		pub_ja.publish(ja)


def path_callback(msg_in):
	global start_traj
	global time_start_traj

	start_traj = True
	rospy.loginfo("Starting arm movements")

def joint_pub():
	rospy.init_node('talker', anonymous=True)

	s = rospy.Subscriber("/mantis_uav/path", Path, path_callback)
	t = rospy.Timer(rospy.Duration(1.0/50.0), timer_callback)

	rospy.spin()

if __name__ == '__main__':
	try:
		joint_pub()
	except rospy.ROSInterruptException:
		pub_j1.unsubscribe()
		pub_j2.unsubscribe()
