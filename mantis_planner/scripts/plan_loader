#!/usr/bin/env python2

import sys
from math import *

import roslib
roslib.load_manifest('mantis_planner')
import rospy
import actionlib

import mantis_planner.movement_loader as ml
from mantis_planner.msg import ManoeuvreAction, ManoeuvreGoal

def main():
	rospy.init_node('plan_loader', anonymous=True)

	manoeuvre_topic = rospy.get_param('~manoeuvre_topic', 'manoeuvre')
	client = actionlib.SimpleActionClient(manoeuvre_topic, ManoeuvreAction)
	client.wait_for_server()

	# Simply to ensure we have a valid timestamp later
	rospy.sleep(rospy.Duration(0.5))

	move = ManoeuvreGoal()

	mode = rospy.get_param("~movements/mode")
	if mode == "discrete":
		move.mode = ManoeuvreGoal.MODE_DISCRETE
		move.nominal_velocity = rospy.get_param("~movements/nominal_velocity")
		move.nominal_rate = rospy.get_param("~movements/nominal_rate")
		move.nominal_joint_rate = rospy.get_param("~movements/nominal_joint_rate")
	elif mode == "continuous":
		move.mode = ManoeuvreGoal.MODE_CONTINUOUS
		move.c_duration = rospy.Duration(rospy.get_param("~movements/duration"))
	else:
		rospy.logerr("Invalid plan mode: %s" % mode)
		raise ValueError("Invalid plan mode")

	success, move.movements, move.joint_names = ml.load_movements()

	if success:
		client.send_goal(move)
		rospy.loginfo("Plan loaded!")
	else:
		rospy.logerr("Unable to load plan!")

	# Simply to ensure we have sent out the message
	#rospy.sleep(rospy.Duration(1.0))

if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass
