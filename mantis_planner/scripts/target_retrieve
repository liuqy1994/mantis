#!/usr/bin/env python2

import sys
from math import *

import roslib
roslib.load_manifest('contrail')
import rospy
import actionlib

import tf2_ros
from std_msgs.msg import Time
from std_srvs.srv import Empty, EmptyRequest
from geometry_msgs.msg import TransformStamped, Quaternion, Vector3

from mantis_planner.msg import ManoeuvreAction, ManoeuvreGoal
from mantis_msgs.msg import Movement

import dynamic_reconfigure.client

global client_move
global sub_target
global srv_param_reload

global tfBuffer
global tfln

global tracking_config
global tracking_client

baton_mass = 0.05

def quaternion_to_rpy(q):
	if not isinstance(q, Quaternion):
		raise TypeError('Input should be a geometry_msgs/Quaternion')

	q2sqr = q.y * q.y;
	t0 = -2.0 * (q2sqr + q.z * q.z) + 1.0
	t1 = 2.0 * (q.x * q.y + q.w * q.z)
	t2 = -2.0 * (q.x * q.z - q.w * q.y)
	t3 = 2.0 * (q.y * q.z + q.w * q.x)
	t4 = -2.0 * (q.x * q.x + q2sqr) + 1.0

	if(t2 > 1.0):
		t2 = 1.0
	elif(t2 < -1.0):
		t2 = -1.0

	roll = atan2(t3, t4);
	pitch = asin(t2);
	yaw = atan2(t1, t0);

	return (roll,pitch,yaw)

def callback_target(msg_in):
	global client_move
	global sub_target
	global srv_param_reload

	global tfBuffer
	global tfln

	global tracking_config
	global tracking_client

	# Make sure the message is valid
	if (msg_in.data > rospy.Time(0)) and (tracking_config is not None):
		sub_target.unregister()

		rospy.loginfo("Target goal identified, generating retrieval manoeuvre")

		# Get current position and goals
		tf_t = tfBuffer.lookup_transform("map", "blue_baton", msg_in.data, rospy.Duration(0.5))
		tf_b = tfBuffer.lookup_transform("map", "mantis_uav", msg_in.data, rospy.Duration(0.5))

		move = ManoeuvreGoal()

		move.mode = ManoeuvreGoal.MODE_DISCRETE
		move.nominal_velocity = 0.1
		move.nominal_rate = 0.2
		move.nominal_joint_rate = 0.2

		move.joint_names = ["joint_shoulder", "joint_elbow"]

		# Starting position is current end effector position, half stow
		rospy.loginfo("Changing to retrieval configuration")
		move.movements.append(Movement())
		move.movements[-1].base.position = tf_b.transform.translation
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_b.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(1.57)

		# Target position is current target pose, unstow
		move.movements.append(Movement())
		move.movements[-1].base.position = tf_b.transform.translation
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_b.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(0.78)

		client_move.send_goal(move)
		client_move.wait_for_result()

		#rospy.loginfo("Switching to end effector tracking mode")
		#tracked_frame = tracking_config.tracked_frame
		#tracking_config.tracked_frame = -1
		#tracking_client.update_configuration(tracking_config)

		# Send off the collection movement
		rospy.loginfo("Moving to retrieval point")
		del move.movements[0]

		stamp = rospy.Time.now()
		tf_b = tfBuffer.lookup_transform("map", "mantis_uav", stamp, rospy.Duration(0.5))
		tf_e = tfBuffer.lookup_transform("map", "mantis_uav/end_effector", stamp, rospy.Duration(0.5))

		de_x = tf_e.transform.translation.x - tf_b.transform.translation.x
		de_y = tf_e.transform.translation.y - tf_b.transform.translation.y
		de_z = tf_e.transform.translation.z - tf_b.transform.translation.z

		# Target position is current target pose, plus the end effector offset, and unstowed
		# Move upwards first
		move.movements.append(Movement())
		move.movements[-1].base.position.x = tf_b.transform.translation.x
		move.movements[-1].base.position.y = tf_b.transform.translation.y
		move.movements[-1].base.position.z = tf_t.transform.translation.z - de_z
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_t.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(0.78)

		move.movements.append(Movement())
		move.movements[-1].base.position.x = tf_t.transform.translation.x - de_x
		move.movements[-1].base.position.y = tf_t.transform.translation.y - de_y
		move.movements[-1].base.position.z = tf_t.transform.translation.z - de_z
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_t.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(0.78)

		client_move.send_goal(move)
		client_move.wait_for_result()

		# XXX: Graps happens here!
		if rospy.has_param("body/b2/mass/m"):
			rospy.set_param("body/b2/mass/m", rospy.get_param("body/b2/mass/m") + baton_mass)
			req = EmptyRequest()
			res = srv_param_reload(req)
		else:
			rospy.logwarn("Failed to update mass properties!")
		# XXX: Graps happens here!

		rospy.loginfo("Performing retrieval")
		del move.movements[0]
		del move.movements[0]

		# Target position is current target pose, unstow
		move.movements.append(Movement())
		move.movements[-1].base.position.x = tf_t.transform.translation.x - de_x
		move.movements[-1].base.position.y = tf_t.transform.translation.y - de_y
		move.movements[-1].base.position.z = tf_t.transform.translation.z - de_z + 0.2
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_t.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(0.78)

		client_move.send_goal(move)
		client_move.wait_for_result()

		# Return to the starting position
		rospy.loginfo("Returning to diversion point")
		del move.movements[0]

		move.movements.append(Movement())
		move.movements[-1].base.position.x = tf_b.transform.translation.x
		move.movements[-1].base.position.y = tf_b.transform.translation.y
		move.movements[-1].base.position.z = tf_t.transform.translation.z - de_z + 0.2
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_t.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(0.78)

		# Target position is current target pose, unstow
		move.movements.append(Movement())
		move.movements[-1].base.position = tf_b.transform.translation
		_, _, move.movements[-1].base.yaw = quaternion_to_rpy(tf_b.transform.rotation)
		move.movements[-1].joints.append(0.78)
		move.movements[-1].joints.append(1.57)

		client_move.send_goal(move)
		client_move.wait_for_result()

		rospy.sleep(rospy.Duration(2))

		# Switch back to same tracking as started with
		#rospy.loginfo("Switching to previous tracking mode")
		#tracking_config.tracked_frame = tracked_frame
		#tracking_client.update_configuration(tracking_config)
	else:
		rospy.logerr("Target retrieve not ready, ignoring target")

def callback_config(config):
	global tracking_config

	tracking_config = config

def main():
	global client_move
	global sub_target
	global srv_param_reload

	global tfBuffer
	global tfln

	global tracking_config
	global tracking_client

	tracking_config = None
	done_move = False

	rospy.init_node('target_retrieve', anonymous=True)

	rospy.loginfo("Loading target retrieve...")

	sub_target = rospy.Subscriber("target_found", Time, callback_target)

	client_move = actionlib.SimpleActionClient('manoeuvre', ManoeuvreAction)
	client_move.wait_for_server()

	tfBuffer = tf2_ros.Buffer()
	tfln = tf2_ros.TransformListener(tfBuffer)

	# Need this to switch out to end effector control and back to the previous settings
	tracking_client = dynamic_reconfigure.client.Client("router_base/control_settings", timeout=30, config_callback=callback_config)

	# Need this to update the weight estimates of the end link
	rospy.wait_for_service('reload_params')
	srv_param_reload = rospy.ServiceProxy('reload_params', Empty)

	rospy.loginfo("Target retrieve ready!")

	rospy.spin()

if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		pass
